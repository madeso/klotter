<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="structklotter_1_1ShaderProgram" kind="struct" language="C++" prot="public">
    <compoundname>klotter::ShaderProgram</compoundname>
    <includes refid="shader_8h" local="no">shader.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structklotter_1_1ShaderProgram_1af3084796decc7cdcf7e65f7367c280db" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int klotter::ShaderProgram::shader_program</definition>
        <argsstring></argsstring>
        <name>shader_program</name>
        <qualifiedname>klotter::ShaderProgram::shader_program</qualifiedname>
        <briefdescription>
<para>The id of the shader program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="161" column="14" bodyfile="src/klotter/render/shader.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structklotter_1_1ShaderProgram_1a392454bbe3b7735fc540da4ac287f0d7" prot="public" static="no" mutable="no">
        <type><ref refid="group__vertex-layout_1gaa3eb81233db95fb693918802ac36cc30" kindref="member">VertexTypes</ref></type>
        <definition>VertexTypes klotter::ShaderProgram::debug_vertex_types</definition>
        <argsstring></argsstring>
        <name>debug_vertex_types</name>
        <qualifiedname>klotter::ShaderProgram::debug_vertex_types</qualifiedname>
        <briefdescription>
<para>The debug information describing the vertex layout that this shader expects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="162" column="13" bodyfile="src/klotter/render/shader.h" bodystart="162" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a63148ed42403184ff3ff02becf7c362e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>klotter::ShaderProgram::ShaderProgram</definition>
        <argsstring>(DEBUG_LABEL_ARG_MANY const std::string &amp;vertex_source, const std::string &amp;fragment_source, const CompiledShaderVertexAttributes &amp;layout)</argsstring>
        <name>ShaderProgram</name>
        <qualifiedname>klotter::ShaderProgram::ShaderProgram</qualifiedname>
        <param>
          <type><ref refid="opengl__labels_8h_1abd34c805e47ae972bc6f5b1e406e921d" kindref="member">DEBUG_LABEL_ARG_MANY</ref> const std::string &amp;</type>
          <declname>vertex_source</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fragment_source</declname>
        </param>
        <param>
          <type>const <ref refid="structklotter_1_1CompiledShaderVertexAttributes" kindref="compound">CompiledShaderVertexAttributes</ref> &amp;</type>
          <declname>layout</declname>
        </param>
        <briefdescription>
<para>Compile and link a shader. </para>
        </briefdescription>
        <detaileddescription>
<para>If there are any errors, they are logged and a zombie object is created instead. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertex_source</parametername>
</parameternamelist>
<parameterdescription>
<para>glsl code for the vertex shader </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragment_source</parametername>
</parameternamelist>
<parameterdescription>
<para>glsl code for the fragment shader </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layout</parametername>
</parameternamelist>
<parameterdescription>
<para>the vertex layout to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1af95702d66323267c513e4dafd89ec16f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>klotter::ShaderProgram::~ShaderProgram</definition>
        <argsstring>()</argsstring>
        <name>~ShaderProgram</name>
        <qualifiedname>klotter::ShaderProgram::~ShaderProgram</qualifiedname>
        <briefdescription>
<para>Destroy the shader if it&apos;s loaded. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structklotter_1_1ShaderProgram_1a18bffd6cab01c6511de9ecaf2ed2a470" kindref="member">clear</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1af07ac3e8da2e98fff4366f4994357c11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>klotter::ShaderProgram::ShaderProgram</definition>
        <argsstring>(const ShaderProgram &amp;)=delete</argsstring>
        <name>ShaderProgram</name>
        <qualifiedname>klotter::ShaderProgram::ShaderProgram</qualifiedname>
        <param>
          <type>const <ref refid="structklotter_1_1ShaderProgram" kindref="compound">ShaderProgram</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copying is not allowed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a5575c3ce1eed9c1c24f37912b667be9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::operator=</definition>
        <argsstring>(const ShaderProgram &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>klotter::ShaderProgram::operator=</qualifiedname>
        <param>
          <type>const <ref refid="structklotter_1_1ShaderProgram" kindref="compound">ShaderProgram</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copying is not allowed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="40" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a61c1ffd3bd1ebba2102572997fb8c51a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>klotter::ShaderProgram::ShaderProgram</definition>
        <argsstring>(ShaderProgram &amp;&amp;other) noexcept</argsstring>
        <name>ShaderProgram</name>
        <qualifiedname>klotter::ShaderProgram::ShaderProgram</qualifiedname>
        <param>
          <type><ref refid="structklotter_1_1ShaderProgram" kindref="compound">ShaderProgram</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Take ownership of another shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the shader to take ownership from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a3716ecafed56627d2172190890d0c6a7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structklotter_1_1ShaderProgram" kindref="compound">ShaderProgram</ref> &amp;</type>
        <definition>ShaderProgram &amp; klotter::ShaderProgram::operator=</definition>
        <argsstring>(ShaderProgram &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>klotter::ShaderProgram::operator=</qualifiedname>
        <param>
          <type><ref refid="structklotter_1_1ShaderProgram" kindref="compound">ShaderProgram</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Take ownership of another shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>the shader to take ownership from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="50" column="15"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a18bffd6cab01c6511de9ecaf2ed2a470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>klotter::ShaderProgram::clear</qualifiedname>
        <briefdescription>
<para>Turn this object into a zombie by destroying it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Does nothing if it already is a zombie </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="55" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1aa278978e62d69fc703d9dd1f3a3eb1fd" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool klotter::ShaderProgram::is_loaded</definition>
        <argsstring>() const</argsstring>
        <name>is_loaded</name>
        <qualifiedname>klotter::ShaderProgram::is_loaded</qualifiedname>
        <briefdescription>
<para>Checks if the <ref refid="structklotter_1_1ShaderProgram" kindref="compound">ShaderProgram</ref> is loaded and valid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the program is valid; otherwise, <computeroutput>false</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="60" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a73e4bc128e29565ba48a973aaa4037b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::use</definition>
        <argsstring>() const</argsstring>
        <name>use</name>
        <qualifiedname>klotter::ShaderProgram::use</qualifiedname>
        <briefdescription>
<para>Activates the <ref refid="structklotter_1_1ShaderProgram" kindref="compound">ShaderProgram</ref> for rendering. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="64" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1ace564eff29cd0309c6bf3843c5e71c4d" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structklotter_1_1Uniform" kindref="compound">Uniform</ref></type>
        <definition>Uniform klotter::ShaderProgram::get_uniform</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>get_uniform</name>
        <qualifiedname>klotter::ShaderProgram::get_uniform</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a uniform by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the uniform in the shader program </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structklotter_1_1Uniform" kindref="compound">Uniform</ref> object representing the location or a zombie if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="70" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1ab89ae54e8f45a2562420f6d000d4dd5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::set_float</definition>
        <argsstring>(const Uniform &amp;uniform, float value)</argsstring>
        <name>set_float</name>
        <qualifiedname>klotter::ShaderProgram::set_float</qualifiedname>
        <param>
          <type>const <ref refid="structklotter_1_1Uniform" kindref="compound">Uniform</ref> &amp;</type>
          <declname>uniform</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets a uniform float value. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if the uniform is a zombie. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uniform</parametername>
</parameternamelist>
<parameterdescription>
<para>the target uniform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The shader must be bound before calling this method </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="78" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a2f68351089117ca8804ae952aadededb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::set_vec2</definition>
        <argsstring>(const Uniform &amp;uniform, float x, float y)</argsstring>
        <name>set_vec2</name>
        <qualifiedname>klotter::ShaderProgram::set_vec2</qualifiedname>
        <param>
          <type>const <ref refid="structklotter_1_1Uniform" kindref="compound">Uniform</ref> &amp;</type>
          <declname>uniform</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Sets a uniform 2d vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if the uniform is a zombie. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uniform</parametername>
</parameternamelist>
<parameterdescription>
<para>the target uniform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x value of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y value of the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The shader must be bound before calling this method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="87" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a20ae4d0b4e064021fe28ff69a27b3189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::set_vec2</definition>
        <argsstring>(const Uniform &amp;uniform, const glm::vec2 &amp;v)</argsstring>
        <name>set_vec2</name>
        <qualifiedname>klotter::ShaderProgram::set_vec2</qualifiedname>
        <param>
          <type>const <ref refid="structklotter_1_1Uniform" kindref="compound">Uniform</ref> &amp;</type>
          <declname>uniform</declname>
        </param>
        <param>
          <type>const glm::vec2 &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets a uniform 2d vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if the uniform is a zombie. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uniform</parametername>
</parameternamelist>
<parameterdescription>
<para>the target uniform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The shader must be bound before calling this method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="95" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a92cb584d966760faf7e378f9663aa493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::set_vec3</definition>
        <argsstring>(const Uniform &amp;uniform, float x, float y, float z)</argsstring>
        <name>set_vec3</name>
        <qualifiedname>klotter::ShaderProgram::set_vec3</qualifiedname>
        <param>
          <type>const <ref refid="structklotter_1_1Uniform" kindref="compound">Uniform</ref> &amp;</type>
          <declname>uniform</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Sets a uniform 3d vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if the uniform is a zombie. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uniform</parametername>
</parameternamelist>
<parameterdescription>
<para>the target uniform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x value of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y value of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the z value of the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The shader must be bound before calling this method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="105" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a602226781e49cd489d0fed3c0ea281ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::set_vec3</definition>
        <argsstring>(const Uniform &amp;uniform, const glm::vec3 &amp;v)</argsstring>
        <name>set_vec3</name>
        <qualifiedname>klotter::ShaderProgram::set_vec3</qualifiedname>
        <param>
          <type>const <ref refid="structklotter_1_1Uniform" kindref="compound">Uniform</ref> &amp;</type>
          <declname>uniform</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets a uniform 3d vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if the uniform is a zombie. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uniform</parametername>
</parameternamelist>
<parameterdescription>
<para>the target uniform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The shader must be bound before calling this method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="113" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1aadd41dca11f7497d8dc5759670fcfea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::set_vec4</definition>
        <argsstring>(const Uniform &amp;uniform, float x, float y, float z, float w)</argsstring>
        <name>set_vec4</name>
        <qualifiedname>klotter::ShaderProgram::set_vec4</qualifiedname>
        <param>
          <type>const <ref refid="structklotter_1_1Uniform" kindref="compound">Uniform</ref> &amp;</type>
          <declname>uniform</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Sets a uniform 4d vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if the uniform is a zombie. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uniform</parametername>
</parameternamelist>
<parameterdescription>
<para>the target uniform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x value of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y value of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the z value of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>the w value of the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The shader must be bound before calling this method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="124" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a9f2731b2367ef643b42feae8bfc64774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::set_vec4</definition>
        <argsstring>(const Uniform &amp;uniform, const glm::vec4 &amp;v)</argsstring>
        <name>set_vec4</name>
        <qualifiedname>klotter::ShaderProgram::set_vec4</qualifiedname>
        <param>
          <type>const <ref refid="structklotter_1_1Uniform" kindref="compound">Uniform</ref> &amp;</type>
          <declname>uniform</declname>
        </param>
        <param>
          <type>const glm::vec4 &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets a uniform 4d vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if the uniform is a zombie. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uniform</parametername>
</parameternamelist>
<parameterdescription>
<para>the target uniform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The shader must be bound before calling this method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="132" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a4f20cc9b36209835cb7428e14bcbe56f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::set_texture</definition>
        <argsstring>(const Uniform &amp;uniform)</argsstring>
        <name>set_texture</name>
        <qualifiedname>klotter::ShaderProgram::set_texture</qualifiedname>
        <param>
          <type>const <ref refid="structklotter_1_1Uniform" kindref="compound">Uniform</ref> &amp;</type>
          <declname>uniform</declname>
        </param>
        <briefdescription>
<para>Sets a texture for a uniform. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if the uniform is a zombie. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uniform</parametername>
</parameternamelist>
<parameterdescription>
<para>the target uniform (must be a texture uniform) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The shader must be bound before calling this method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="139" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a683f87ad48aed3e849952c7779af1e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::set_mat</definition>
        <argsstring>(const Uniform &amp;uniform, const glm::mat4 &amp;mat)</argsstring>
        <name>set_mat</name>
        <qualifiedname>klotter::ShaderProgram::set_mat</qualifiedname>
        <param>
          <type>const <ref refid="structklotter_1_1Uniform" kindref="compound">Uniform</ref> &amp;</type>
          <declname>uniform</declname>
        </param>
        <param>
          <type>const glm::mat4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Sets a uniform 4x4 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uniform</parametername>
</parameternamelist>
<parameterdescription>
<para>the target uniform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The shader must be bound before calling this method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="146" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1a9a239119b7688aa1c166c88262e8a1cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::set_mat</definition>
        <argsstring>(const Uniform &amp;uniform, const glm::mat3 &amp;mat)</argsstring>
        <name>set_mat</name>
        <qualifiedname>klotter::ShaderProgram::set_mat</qualifiedname>
        <param>
          <type>const <ref refid="structklotter_1_1Uniform" kindref="compound">Uniform</ref> &amp;</type>
          <declname>uniform</declname>
        </param>
        <param>
          <type>const glm::mat3 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Sets a uniform 3x3 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if the uniform is a zombie. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uniform</parametername>
</parameternamelist>
<parameterdescription>
<para>the target uniform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The shader must be bound before calling this method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="154" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structklotter_1_1ShaderProgram_1acf995e0f3e5b1543aac53c61c00d2aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void klotter::ShaderProgram::setup_uniform_block</definition>
        <argsstring>(const UniformBufferSetup &amp;setup)</argsstring>
        <name>setup_uniform_block</name>
        <qualifiedname>klotter::ShaderProgram::setup_uniform_block</qualifiedname>
        <param>
          <type>const <ref refid="structklotter_1_1UniformBufferSetup" kindref="compound">UniformBufferSetup</ref> &amp;</type>
          <declname>setup</declname>
        </param>
        <briefdescription>
<para>Configures a uniform block binding for the shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>setup</parametername>
</parameternamelist>
<parameterdescription>
<para>the information about the uniform block setup </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/render/shader.h" line="159" column="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>RAII representation of a open gl shader program. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/klotter/render/shader.h" line="16" column="1" bodyfile="src/klotter/render/shader.h" bodystart="17" bodyend="163"/>
    <listofallmembers>
      <member refid="structklotter_1_1ShaderProgram_1a18bffd6cab01c6511de9ecaf2ed2a470" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>clear</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a392454bbe3b7735fc540da4ac287f0d7" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>debug_vertex_types</name></member>
      <member refid="structklotter_1_1ShaderProgram_1ace564eff29cd0309c6bf3843c5e71c4d" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>get_uniform</name></member>
      <member refid="structklotter_1_1ShaderProgram_1aa278978e62d69fc703d9dd1f3a3eb1fd" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>is_loaded</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a5575c3ce1eed9c1c24f37912b667be9f" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>operator=</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a3716ecafed56627d2172190890d0c6a7" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>operator=</name></member>
      <member refid="structklotter_1_1ShaderProgram_1ab89ae54e8f45a2562420f6d000d4dd5f" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>set_float</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a683f87ad48aed3e849952c7779af1e47" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>set_mat</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a9a239119b7688aa1c166c88262e8a1cf" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>set_mat</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a4f20cc9b36209835cb7428e14bcbe56f" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>set_texture</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a2f68351089117ca8804ae952aadededb" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>set_vec2</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a20ae4d0b4e064021fe28ff69a27b3189" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>set_vec2</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a92cb584d966760faf7e378f9663aa493" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>set_vec3</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a602226781e49cd489d0fed3c0ea281ff" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>set_vec3</name></member>
      <member refid="structklotter_1_1ShaderProgram_1aadd41dca11f7497d8dc5759670fcfea2" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>set_vec4</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a9f2731b2367ef643b42feae8bfc64774" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>set_vec4</name></member>
      <member refid="structklotter_1_1ShaderProgram_1acf995e0f3e5b1543aac53c61c00d2aa0" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>setup_uniform_block</name></member>
      <member refid="structklotter_1_1ShaderProgram_1af3084796decc7cdcf7e65f7367c280db" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>shader_program</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a63148ed42403184ff3ff02becf7c362e" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>ShaderProgram</name></member>
      <member refid="structklotter_1_1ShaderProgram_1af07ac3e8da2e98fff4366f4994357c11" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>ShaderProgram</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a61c1ffd3bd1ebba2102572997fb8c51a" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>ShaderProgram</name></member>
      <member refid="structklotter_1_1ShaderProgram_1a73e4bc128e29565ba48a973aaa4037b4" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>use</name></member>
      <member refid="structklotter_1_1ShaderProgram_1af95702d66323267c513e4dafd89ec16f" prot="public" virt="non-virtual"><scope>klotter::ShaderProgram</scope><name>~ShaderProgram</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
