<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="structVisualDebugging_1_1Frame" kind="struct" language="C++" prot="public">
    <compoundname>VisualDebugging::Frame</compoundname>
    <includes refid="vdebug_8h" local="no">vdebug.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structVisualDebugging_1_1Frame_1a4104072b526a2d3e78b618ed378aacdf" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string VisualDebugging::Frame::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <qualifiedname>VisualDebugging::Frame::description</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/vdebug.h" line="86" column="13" bodyfile="src/klotter/vdebug.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structVisualDebugging_1_1Frame_1aca9aaf57723acd51c1ea7efe856cf03e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="structVisualDebugging_1_1SceneArtist" kindref="compound">SceneArtist</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;SceneArtist&gt; &gt; VisualDebugging::Frame::artists</definition>
        <argsstring></argsstring>
        <name>artists</name>
        <qualifiedname>VisualDebugging::Frame::artists</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/vdebug.h" line="87" column="13" bodyfile="src/klotter/vdebug.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structVisualDebugging_1_1Frame_1a460790ca1245c14cbeccc92fbbd3016d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool VisualDebugging::Frame::keep_in_background</definition>
        <argsstring></argsstring>
        <name>keep_in_background</name>
        <qualifiedname>VisualDebugging::Frame::keep_in_background</qualifiedname>
        <briefdescription>
<para>should this frame be erased before drawing the next? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/vdebug.h" line="94" column="6" bodyfile="src/klotter/vdebug.h" bodystart="94" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structVisualDebugging_1_1Frame_1a10f3d9515781ee16fe81f66445478593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VisualDebugging::Frame::Frame</definition>
        <argsstring>(const std::string &amp;the_description, bool do_not_erase)</argsstring>
        <name>Frame</name>
        <qualifiedname>VisualDebugging::Frame::Frame</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>the_description</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_not_erase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/vdebug.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structVisualDebugging_1_1Frame_1a756e184e7affa1ad0f9ab3d7e9995867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VisualDebugging::Frame::AddArtist</definition>
        <argsstring>(std::unique_ptr&lt; SceneArtist &gt; artist)</argsstring>
        <name>AddArtist</name>
        <qualifiedname>VisualDebugging::Frame::AddArtist</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structVisualDebugging_1_1SceneArtist" kindref="compound">SceneArtist</ref> &gt;</type>
          <declname>artist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/vdebug.h" line="91" column="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="7">
        <label>VisualDebugging::Color</label>
        <link refid="structVisualDebugging_1_1Color"/>
      </node>
      <node id="1">
        <label>VisualDebugging::Frame</label>
        <link refid="structVisualDebugging_1_1Frame"/>
        <childnode refid="2" relation="usage">
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>artists</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>VisualDebugging::SceneArtist</label>
        <link refid="structVisualDebugging_1_1SceneArtist"/>
        <childnode refid="7" relation="usage">
          <edgelabel>active_draw_color_</edgelabel>
          <edgelabel>inactive_draw_color_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>std::unique_ptr&lt; VisualDebugging::SceneArtist &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; std::unique_ptr&lt; VisualDebugging::SceneArtist &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/klotter/vdebug.h" line="84" column="1" bodyfile="src/klotter/vdebug.h" bodystart="85" bodyend="95"/>
    <listofallmembers>
      <member refid="structVisualDebugging_1_1Frame_1a756e184e7affa1ad0f9ab3d7e9995867" prot="public" virt="non-virtual"><scope>VisualDebugging::Frame</scope><name>AddArtist</name></member>
      <member refid="structVisualDebugging_1_1Frame_1aca9aaf57723acd51c1ea7efe856cf03e" prot="public" virt="non-virtual"><scope>VisualDebugging::Frame</scope><name>artists</name></member>
      <member refid="structVisualDebugging_1_1Frame_1a4104072b526a2d3e78b618ed378aacdf" prot="public" virt="non-virtual"><scope>VisualDebugging::Frame</scope><name>description</name></member>
      <member refid="structVisualDebugging_1_1Frame_1a10f3d9515781ee16fe81f66445478593" prot="public" virt="non-virtual"><scope>VisualDebugging::Frame</scope><name>Frame</name></member>
      <member refid="structVisualDebugging_1_1Frame_1a460790ca1245c14cbeccc92fbbd3016d" prot="public" virt="non-virtual"><scope>VisualDebugging::Frame</scope><name>keep_in_background</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
