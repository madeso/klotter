<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="assert_8h" kind="file" language="C++">
    <compoundname>assert.h</compoundname>
    <sectiondef kind="define">
      <memberdef kind="define" id="assert_8h_1aca68c0d4ac8df0838e209fb5300f7be3" prot="public" static="no">
        <name>ASSERT</name>
        <param><defname>x</defname></param>
        <initializer>	do \
	{ \
		if (x) \
		{ \
		} \
		else \
		{ \
			<ref refid="assert_8h_1acf344b926260b1dfbcd9b497c635c2e8" kindref="member">::on_assert_failure</ref>(#x, __PRETTY_FUNCTION__, __FILE__, __LINE__); \
		} \
	} while (false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/assert.h" line="9" column="9" bodyfile="src/klotter/assert.h" bodystart="9" bodyend="19"/>
      </memberdef>
      <memberdef kind="define" id="assert_8h_1ac13d78404c4f2adb1fbffb12abbb7a18" prot="public" static="no">
        <name>DIE</name>
        <param><defname>reason</defname></param>
        <initializer><ref refid="assert_8h_1acf344b926260b1dfbcd9b497c635c2e8" kindref="member">::on_assert_failure</ref>(reason, __PRETTY_FUNCTION__, __FILE__, __LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/assert.h" line="20" column="9" bodyfile="src/klotter/assert.h" bodystart="20" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="assert_8h_1acf344b926260b1dfbcd9b497c635c2e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void on_assert_failure</definition>
        <argsstring>(std::string_view function, std::string_view reason, std::string_view file, int line)</argsstring>
        <name>on_assert_failure</name>
        <param>
          <type>std::string_view</type>
          <declname>function</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/assert.h" line="22" column="6" declfile="src/klotter/assert.h" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="assert_8h_1aee5e1bbf8aaba41d55d1018f6f5f700a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enable_exception_on_assert</definition>
        <argsstring>()</argsstring>
        <name>enable_exception_on_assert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/klotter/assert.h" line="23" column="6" declfile="src/klotter/assert.h" declline="23" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__PRETTY_FUNCTION__<sp/>__FUNCSIG__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="assert_8h_1aca68c0d4ac8df0838e209fb5300f7be3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT(x)<sp/>\</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>\</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(x)<sp/>\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::on_assert_failure(#x,<sp/>__PRETTY_FUNCTION__,<sp/>__FILE__,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="assert_8h_1ac13d78404c4f2adb1fbffb12abbb7a18" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DIE(reason)<sp/>::on_assert_failure(reason,<sp/>__PRETTY_FUNCTION__,<sp/>__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="assert_8h_1acf344b926260b1dfbcd9b497c635c2e8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="assert_8h_1acf344b926260b1dfbcd9b497c635c2e8" kindref="member">on_assert_failure</ref>(std::string_view<sp/>function,<sp/>std::string_view<sp/>reason,<sp/>std::string_view<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="23" refid="assert_8h_1aee5e1bbf8aaba41d55d1018f6f5f700a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="assert_8h_1aee5e1bbf8aaba41d55d1018f6f5f700a" kindref="member">enable_exception_on_assert</ref>();</highlight></codeline>
    </programlisting>
    <location file="src/klotter/assert.h"/>
  </compounddef>
</doxygen>
