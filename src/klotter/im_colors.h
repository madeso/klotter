#pragma once

#include "imgui.h"

namespace klotter::imgui
{

/** \addtogroup imguicolors Dear ImGui Colors
 * This defines "open color" colors for Dear ImGui.
 * https://yeun.github.io/open-color/
 *  @{
*/

/// The alpha value for all the colors.
constexpr ImU32 ALPHA = 0xff;

/// Pure white.
constexpr ImU32 white = IM_COL32(0xff, 0xff, 0xff, ALPHA);

/// Pure black.
constexpr ImU32 black = IM_COL32(0x00, 0x00, 0x00, ALPHA);

/// First element is the least gray (almost white), last element is the most gray.
constexpr std::array<ImU32, 10> gray
	= {IM_COL32(0xf8, 0xf9, 0xfa, ALPHA),
	   IM_COL32(0xf1, 0xf3, 0xf5, ALPHA),
	   IM_COL32(0xe9, 0xec, 0xef, ALPHA),
	   IM_COL32(0xde, 0xe2, 0xe6, ALPHA),
	   IM_COL32(0xce, 0xd4, 0xda, ALPHA),
	   IM_COL32(0xad, 0xb5, 0xbd, ALPHA),
	   IM_COL32(0x86, 0x8e, 0x96, ALPHA),
	   IM_COL32(0x49, 0x50, 0x57, ALPHA),
	   IM_COL32(0x34, 0x3a, 0x40, ALPHA),
	   IM_COL32(0x21, 0x25, 0x29, ALPHA)};

/// First element is the least red (almost white), last element is the most red.
constexpr std::array<ImU32, 10> red
	= {IM_COL32(0xff, 0xf5, 0xf5, ALPHA),
	   IM_COL32(0xff, 0xe3, 0xe3, ALPHA),
	   IM_COL32(0xff, 0xc9, 0xc9, ALPHA),
	   IM_COL32(0xff, 0xa8, 0xa8, ALPHA),
	   IM_COL32(0xff, 0x87, 0x87, ALPHA),
	   IM_COL32(0xff, 0x6b, 0x6b, ALPHA),
	   IM_COL32(0xfa, 0x52, 0x52, ALPHA),
	   IM_COL32(0xf0, 0x3e, 0x3e, ALPHA),
	   IM_COL32(0xe0, 0x31, 0x31, ALPHA),
	   IM_COL32(0xc9, 0x2a, 0x2a, ALPHA)};

/// First element is the least pink (almost white), last element is the most pink.
constexpr std::array<ImU32, 10> pink
	= {IM_COL32(0xff, 0xf0, 0xf6, ALPHA),
	   IM_COL32(0xff, 0xde, 0xeb, ALPHA),
	   IM_COL32(0xfc, 0xc2, 0xd7, ALPHA),
	   IM_COL32(0xfa, 0xa2, 0xc1, ALPHA),
	   IM_COL32(0xf7, 0x83, 0xac, ALPHA),
	   IM_COL32(0xf0, 0x65, 0x95, ALPHA),
	   IM_COL32(0xe6, 0x49, 0x80, ALPHA),
	   IM_COL32(0xd6, 0x33, 0x6c, ALPHA),
	   IM_COL32(0xc2, 0x25, 0x5c, ALPHA),
	   IM_COL32(0xa6, 0x1e, 0x4d, ALPHA)};

/// First element is the least grape (almost white), last element is the most grape.
constexpr std::array<ImU32, 10> grape
	= {IM_COL32(0xf8, 0xf0, 0xfc, ALPHA),
	   IM_COL32(0xf3, 0xd9, 0xfa, ALPHA),
	   IM_COL32(0xee, 0xbe, 0xfa, ALPHA),
	   IM_COL32(0xe5, 0x99, 0xf7, ALPHA),
	   IM_COL32(0xda, 0x77, 0xf2, ALPHA),
	   IM_COL32(0xcc, 0x5d, 0xe8, ALPHA),
	   IM_COL32(0xbe, 0x4b, 0xdb, ALPHA),
	   IM_COL32(0xae, 0x3e, 0xc9, ALPHA),
	   IM_COL32(0x9c, 0x36, 0xb5, ALPHA),
	   IM_COL32(0x86, 0x2e, 0x9c, ALPHA)};

/// First element is the least violet (almost white), last element is the most violet.
constexpr std::array<ImU32, 10> violet
	= {IM_COL32(0xf3, 0xf0, 0xff, ALPHA),
	   IM_COL32(0xe5, 0xdb, 0xff, ALPHA),
	   IM_COL32(0xd0, 0xbf, 0xff, ALPHA),
	   IM_COL32(0xb1, 0x97, 0xfc, ALPHA),
	   IM_COL32(0x97, 0x75, 0xfa, ALPHA),
	   IM_COL32(0x84, 0x5e, 0xf7, ALPHA),
	   IM_COL32(0x79, 0x50, 0xf2, ALPHA),
	   IM_COL32(0x70, 0x48, 0xe8, ALPHA),
	   IM_COL32(0x67, 0x41, 0xd9, ALPHA),
	   IM_COL32(0x5f, 0x3d, 0xc4, ALPHA)};

/// First element is the least indigo (almost white), last element is the most indigo.
constexpr std::array<ImU32, 10> indigo
	= {IM_COL32(0xed, 0xf2, 0xff, ALPHA),
	   IM_COL32(0xdb, 0xe4, 0xff, ALPHA),
	   IM_COL32(0xba, 0xc8, 0xff, ALPHA),
	   IM_COL32(0x91, 0xa7, 0xff, ALPHA),
	   IM_COL32(0x74, 0x8f, 0xfc, ALPHA),
	   IM_COL32(0x5c, 0x7c, 0xfa, ALPHA),
	   IM_COL32(0x4c, 0x6e, 0xf5, ALPHA),
	   IM_COL32(0x42, 0x63, 0xeb, ALPHA),
	   IM_COL32(0x3b, 0x5b, 0xdb, ALPHA),
	   IM_COL32(0x36, 0x4f, 0xc7, ALPHA)};

/// First element is the least blue (almost white), last element is the most blue.
constexpr std::array<ImU32, 10> blue
	= {IM_COL32(0xe7, 0xf5, 0xff, ALPHA),
	   IM_COL32(0xd0, 0xeb, 0xff, ALPHA),
	   IM_COL32(0xa5, 0xd8, 0xff, ALPHA),
	   IM_COL32(0x74, 0xc0, 0xfc, ALPHA),
	   IM_COL32(0x4d, 0xab, 0xf7, ALPHA),
	   IM_COL32(0x33, 0x9a, 0xf0, ALPHA),
	   IM_COL32(0x22, 0x8b, 0xe6, ALPHA),
	   IM_COL32(0x1c, 0x7e, 0xd6, ALPHA),
	   IM_COL32(0x19, 0x71, 0xc2, ALPHA),
	   IM_COL32(0x18, 0x64, 0xab, ALPHA)};

/// First element is the least cyan (almost white), last element is the most cyan.
constexpr std::array<ImU32, 10> cyan
	= {IM_COL32(0xe3, 0xfa, 0xfc, ALPHA),
	   IM_COL32(0xc5, 0xf6, 0xfa, ALPHA),
	   IM_COL32(0x99, 0xe9, 0xf2, ALPHA),
	   IM_COL32(0x66, 0xd9, 0xe8, ALPHA),
	   IM_COL32(0x3b, 0xc9, 0xdb, ALPHA),
	   IM_COL32(0x22, 0xb8, 0xcf, ALPHA),
	   IM_COL32(0x15, 0xaa, 0xbf, ALPHA),
	   IM_COL32(0x10, 0x98, 0xad, ALPHA),
	   IM_COL32(0x0c, 0x85, 0x99, ALPHA),
	   IM_COL32(0x0b, 0x72, 0x85, ALPHA)};

/// First element is the least teal (almost white), last element is the most teal.
constexpr std::array<ImU32, 10> teal
	= {IM_COL32(0xe6, 0xfc, 0xf5, ALPHA),
	   IM_COL32(0xc3, 0xfa, 0xe8, ALPHA),
	   IM_COL32(0x96, 0xf2, 0xd7, ALPHA),
	   IM_COL32(0x63, 0xe6, 0xbe, ALPHA),
	   IM_COL32(0x38, 0xd9, 0xa9, ALPHA),
	   IM_COL32(0x20, 0xc9, 0x97, ALPHA),
	   IM_COL32(0x12, 0xb8, 0x86, ALPHA),
	   IM_COL32(0x0c, 0xa6, 0x78, ALPHA),
	   IM_COL32(0x09, 0x92, 0x68, ALPHA),
	   IM_COL32(0x08, 0x7f, 0x5b, ALPHA)};

/// First element is the least green (almost white), last element is the most green.
constexpr std::array<ImU32, 10> green
	= {IM_COL32(0xeb, 0xfb, 0xee, ALPHA),
	   IM_COL32(0xd3, 0xf9, 0xd8, ALPHA),
	   IM_COL32(0xb2, 0xf2, 0xbb, ALPHA),
	   IM_COL32(0x8c, 0xe9, 0x9a, ALPHA),
	   IM_COL32(0x69, 0xdb, 0x7c, ALPHA),
	   IM_COL32(0x51, 0xcf, 0x66, ALPHA),
	   IM_COL32(0x40, 0xc0, 0x57, ALPHA),
	   IM_COL32(0x37, 0xb2, 0x4d, ALPHA),
	   IM_COL32(0x2f, 0x9e, 0x44, ALPHA),
	   IM_COL32(0x2b, 0x8a, 0x3e, ALPHA)};

/// First element is the least lime (almost white), last element is the most lime.
constexpr std::array<ImU32, 10> lime
	= {IM_COL32(0xf4, 0xfc, 0xe3, ALPHA),
	   IM_COL32(0xe9, 0xfa, 0xc8, ALPHA),
	   IM_COL32(0xd8, 0xf5, 0xa2, ALPHA),
	   IM_COL32(0xc0, 0xeb, 0x75, ALPHA),
	   IM_COL32(0xa9, 0xe3, 0x4b, ALPHA),
	   IM_COL32(0x94, 0xd8, 0x2d, ALPHA),
	   IM_COL32(0x82, 0xc9, 0x1e, ALPHA),
	   IM_COL32(0x74, 0xb8, 0x16, ALPHA),
	   IM_COL32(0x66, 0xa8, 0x0f, ALPHA),
	   IM_COL32(0x5c, 0x94, 0x0d, ALPHA)};

/// First element is the least yellow (almost white), last element is the most yellow.
constexpr std::array<ImU32, 10> yellow
	= {IM_COL32(0xff, 0xf9, 0xdb, ALPHA),
	   IM_COL32(0xff, 0xf3, 0xbf, ALPHA),
	   IM_COL32(0xff, 0xec, 0x99, ALPHA),
	   IM_COL32(0xff, 0xe0, 0x66, ALPHA),
	   IM_COL32(0xff, 0xd4, 0x3b, ALPHA),
	   IM_COL32(0xfc, 0xc4, 0x19, ALPHA),
	   IM_COL32(0xfa, 0xb0, 0x05, ALPHA),
	   IM_COL32(0xf5, 0x9f, 0x00, ALPHA),
	   IM_COL32(0xf0, 0x8c, 0x00, ALPHA),
	   IM_COL32(0xe6, 0x77, 0x00, ALPHA)};

/// First element is the least orange (almost white), last element is the most orange.
constexpr std::array<ImU32, 10> orange
	= {IM_COL32(0xff, 0xf4, 0xe6, ALPHA),
	   IM_COL32(0xff, 0xe8, 0xcc, ALPHA),
	   IM_COL32(0xff, 0xd8, 0xa8, ALPHA),
	   IM_COL32(0xff, 0xc0, 0x78, ALPHA),
	   IM_COL32(0xff, 0xa9, 0x4d, ALPHA),
	   IM_COL32(0xff, 0x92, 0x2b, ALPHA),
	   IM_COL32(0xfd, 0x7e, 0x14, ALPHA),
	   IM_COL32(0xf7, 0x67, 0x07, ALPHA),
	   IM_COL32(0xe8, 0x59, 0x0c, ALPHA),
	   IM_COL32(0xd9, 0x48, 0x0f, ALPHA)};

/**
 * @}
*/

}  //  namespace klotter::imgui
